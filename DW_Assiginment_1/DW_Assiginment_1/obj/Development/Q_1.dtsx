<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/29/2024 4:55:13 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-E848SRJ"
  DTS:CreatorName="DESKTOP-E848SRJ\Asus"
  DTS:DTSID="{83000017-0739-4200-A72A-122AFA25EAAF}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Q_1"
  DTS:PackageType="5"
  DTS:VersionBuild="8"
  DTS:VersionGUID="{63B6F2FF-CC2D-4F5C-8C0B-DADD27E126A6}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\LoadAPI_Into_DB"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{D9D3DFB0-7513-40F0-91B2-06DDC88790AD}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="LoadAPI_Into_DB"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_51d9439355004825ada71de8853bcfa6"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="ST_51d9439355004825ada71de8853bcfa6.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{DFC8B99F-C506-4A3F-862B-C50C02F6C6D9}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_51d9439355004825ada71de8853bcfa6</RootNamespace>
    <AssemblyName>ST_51d9439355004825ada71de8853bcfa6</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\Asus\AppData\Local\Temp\Vsta\SSIS_ST160\VstabSsT2ZLot0KzNzi7NTliTQ\packages\Newtonsoft.Json.13.0.3\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using Newtonsoft.Json;
#endregion

namespace ST_51d9439355004825ada71de8853bcfa6
{

    public class Entry
    {
        public string Name { get; set; }
        //public string StateProvince { get; set; }

        [JsonProperty("domains")]
        public List<string> Domains { get; set; }

        [JsonProperty("web_pages")]
        public List<string> WebPages { get; set; }

        [JsonProperty("alpha_two_code")]
        public string AlphaTwoCode { get; set; }

        public string Country { get; set; }
    }


    public class Root
    {
        public int Count { get; set; }
        public List<Entry> Entries { get; set; }
    }
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{


            string currentdatetime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string LogFolder = @"D:\Files\Logs\";

            try
            {
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                var json = "";
                using (WebClient wc = new WebClient())
                {
                    json = wc.DownloadString("http://universities.hipolabs.com/search?country=United+States");
                }

                List<Entry> entries = JsonConvert.DeserializeObject<List<Entry>>(json);

                foreach (Entry entry in entries)
                {
                   
                    if (entry != null)
                    {
                        string connectionString = @"Data Source = DESKTOP-E848SRJ ; Initial Catalog = ThirdYear; Integrated Security = True; ";
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            // Open the connection
                            connection.Open();

                            // Create the insert statement
                            //string stateProvinceValue = entry.StateProvince != null ? $"'{entry.StateProvince.Replace("'", "''")}'" : "NULL";
                            string insertStatement = $"INSERT INTO JSON_DATA(University_Name, University_Domains, University_Web_Pages, University_Alpha_Two_Code, University_Country) " +
                                                     $"VALUES('{entry.Name.Replace("'", "''")}', '{string.Join(",", entry.Domains)}', '{string.Join(",", entry.WebPages)}', '{entry.AlphaTwoCode}', '{entry.Country}')";

                            // Create a SqlCommand object with the insert statement and the SqlConnection object
                            SqlCommand command = new SqlCommand(insertStatement, connection);

                            // Execute the insert statement
                            int rowsAffected = command.ExecuteNonQuery();
                        }
                    }

                }



            }

            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(LogFolder + "\\" + "ErrorLog_" + currentdatetime + ".log"))
                {
                    sw.WriteLine(exception.ToString());
                }

            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_51d9439355004825ada71de8853bcfa6</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_51d9439355004825ada71de8853bcfa6</msb:DisplayName>
    <msb:ProjectId>{7E98CC2A-72A7-46D1-A771-D5BE59BD96E1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_51d9439355004825ada71de8853bcfa6.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net472" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_51d9439355004825ada71de8853bcfa6.Properties.Settings.get_Default():ST_51d9439355004825ada71de8853bcfa6.Properties.Sett" +
    "ings")]

namespace ST_51d9439355004825ada71de8853bcfa6.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_51d9439355004825ada71de8853bcfa6")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_51d9439355004825ada71de8853bcfa6")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_51d9439355004825ada71de8853bcfa6.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_51d9439355004825ada71de8853bcfa6.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_51d9439355004825ada71de8853bcfa6.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_51d9439355004825ada71de8853bcfa6.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_51d9439355004825ada71de8853bcfa6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_51d9439355004825ada71de8853bcfa6.dll">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
EwCCAS4AGwChAS4AIwCqAS4AKwDTAS4AMwDTAS4AOwDTAS4AQwCqAS4ASwDZAS4AUwDTAS4AWwDw
AUAAYwDqAEEAYwDqAEkAawA6AmAAYwDqAGEAYwDqAGkAawBHAoAAYwDqAIEAYwDqAIMAcwDqAIkA
awBWAqAAYwDqAKEAYwDqAKMAewDqAMAAYwDqAMEAYwDqAOAAYwDqAOEAYwDqAAABYwDqAAkBgwCh
ASABYwDqACkBgwChAUABYwDqAEEBYwDqAIABYwDqAKABYwDqAMABYwDqAOABYwDqABsAAgABAAMA
BgAFAAgABgAKAAAAxgFRAQAARgdVAQAA3QZVAQAAdwFRAQAASwhRAQAA5QddAQAA9gZhAQAA3wVq
AQAAGwJvAQAAlAd0AQIAAQADAAEAAgADAAIAAwAFAAEABAAFAAIABQAHAAEABgAHAAIABwAJAAEA
CAAJAAIACQALAAEACgALAAIADAANAAEADQANAAIADgAPAAEADwAPAAIAFAARAAIAFQATAAEAFgAT
AAIAFwAVAFkAaQAEgAAAAQAAALgiiWoAAAAAAAAWAAAABAAAAAAAAAAAAAAAygBhAAAAAAANAAAA
AAAAAAAAAADTAL8FAAAAABAAAAAAAAAAAAAAANwAcQQAAAAABAAAAAAAAAAAAAAAygAeBQAAAAAE
AAAAAAAAAAAAAADKAFUAAAAAAAAAAAABAAAAegYAAAcABAAzAFAAAAAAAABJRW51bWVyYWJsZWAx
AExpc3RgMQBTVF81MWQ5NDM5MzU1MDA0ODI1YWRhNzFkZTg4NTNiY2ZhNgA8TW9kdWxlPgBTeXN0
ZW0uSU8AdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2Vu
ZXJpYwA8QWxwaGFUd29Db2RlPmtfX0JhY2tpbmdGaWVsZAA8TmFtZT5rX19CYWNraW5nRmllbGQA
PFdlYlBhZ2VzPmtfX0JhY2tpbmdGaWVsZAA8RW50cmllcz5rX19CYWNraW5nRmllbGQAPERvbWFp
bnM+a19fQmFja2luZ0ZpZWxkADxDb3VudD5rX19CYWNraW5nRmllbGQAPENvdW50cnk+a19fQmFj
a2luZ0ZpZWxkAERiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UAZGVmYXVsdEluc3RhbmNlAGdl
dF9BbHBoYVR3b0NvZGUAc2V0X0FscGhhVHdvQ29kZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhh
bmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAGdldF9OYW1lAHNldF9OYW1lAERhdGVUaW1lAFdy
aXRlTGluZQBTZWN1cml0eVByb3RvY29sVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRp
b25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVy
YXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRy
aWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNz
ZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5
Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBp
bGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2Vt
Ymx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUASnNv
blByb3BlcnR5QXR0cmlidXRlAHZhbHVlAHNldF9FeHBlY3QxMDBDb250aW51ZQBTeXN0ZW0uUnVu
dGltZS5WZXJzaW9uaW5nAERvd25sb2FkU3RyaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNj
cmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF81MWQ5NDM5MzU1MDA0ODI1
YWRhNzFkZTg4NTNiY2ZhNi5kbGwAc2V0X1NlY3VyaXR5UHJvdG9jb2wAU3lzdGVtAEVudW0AcmVz
b3VyY2VNYW4AT3BlbgBTY3JpcHRNYWluAEpvaW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVt
Lkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARGJDb25uZWN0aW9uAFNxbENvbm5lY3Rp
b24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBOZXd0b25zb2Z0Lkpzb24AQ3VsdHVyZUlu
Zm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBTZXJ2aWNlUG9pbnRNYW5hZ2VyAFN0cmVhbVdyaXRlcgBU
ZXh0V3JpdGVyAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfNTFkOTQz
OTM1NTAwNDgyNWFkYTcxZGU4ODUzYmNmYTYuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAGdldF9XZWJQYWdlcwBzZXRfV2ViUGFnZXMAZ2V0X0VudHJpZXMAc2V0
X0VudHJpZXMAU1RfNTFkOTQzOTM1NTAwNDgyNWFkYTcxZGU4ODUzYmNmYTYuUHJvcGVydGllcwBT
ZXR0aW5ncwBnZXRfRG9tYWlucwBzZXRfRG9tYWlucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVz
dWx0cwBDb25jYXQARGVzZXJpYWxpemVPYmplY3QAU3lzdGVtLk5ldABnZXRfRGVmYXVsdABzZXRf
VGFza1Jlc3VsdABXZWJDbGllbnQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AGdl
dF9Db3VudABzZXRfQ291bnQAUm9vdABKc29uQ29udmVydABNb3ZlTmV4dABDcmVhdGVUZXh0AGdl
dF9Ob3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBFbnRyeQBnZXRfQ291bnRyeQBzZXRf
Q291bnRyeQAAAB15AHkAeQB5AE0ATQBkAGQASABIAG0AbQBzAHMAAB1EADoAXABGAGkAbABlAHMA
XABMAG8AZwBzAFwAAAEAe2gAdAB0AHAAOgAvAC8AdQBuAGkAdgBlAHIAcwBpAHQAaQBlAHMALgBo
AGkAcABvAGwAYQBiAHMALgBjAG8AbQAvAHMAZQBhAHIAYwBoAD8AYwBvAHUAbgB0AHIAeQA9AFUA
bgBpAHQAZQBkACsAUwB0AGEAdABlAHMAAICzRABhAHQAYQAgAFMAbwB1AHIAYwBlACAAPQAgAEQA
RQBTAEsAVABPAFAALQBFADgANAA4AFMAUgBKACAAOwAgAEkAbgBpAHQAaQBhAGwAIABDAGEAdABh
AGwAbwBnACAAPQAgAFQAaABpAHIAZABZAGUAYQByADsAIABJAG4AdABlAGcAcgBhAHQAZQBkACAA
UwBlAGMAdQByAGkAdAB5ACAAPQAgAFQAcgB1AGUAOwAgAAGBEUkATgBTAEUAUgBUACAASQBOAFQA
TwAgAEoAUwBPAE4AXwBEAEEAVABBACgAVQBuAGkAdgBlAHIAcwBpAHQAeQBfAE4AYQBtAGUALAAg
AFUAbgBpAHYAZQByAHMAaQB0AHkAXwBEAG8AbQBhAGkAbgBzACwAIABVAG4AaQB2AGUAcgBzAGkA
dAB5AF8AVwBlAGIAXwBQAGEAZwBlAHMALAAgAFUAbgBpAHYAZQByAHMAaQB0AHkAXwBBAGwAcABo
AGEAXwBUAHcAbwBfAEMAbwBkAGUALAAgAFUAbgBpAHYAZQByAHMAaQB0AHkAXwBDAG8AdQBuAHQA
cgB5ACkAIABWAEEATABVAEUAUwAoACcAAQMnAAEFJwAnAAEJJwAsACAAJwABAywAAAUnACkAARVc
AEUAcgByAG8AcgBMAG8AZwBfAAAJLgBsAG8AZwAAcVMAVABfADUAMQBkADkANAAzADkAMwA1ADUA
MAAwADQAOAAyADUAYQBkAGEANwAxAGQAZQA4ADgANQAzAGIAYwBmAGEANgAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAD8KsLTOS6ZCnTvH8x5MFiwABCABAQgDIAAB
BSABARERBCABAQ4FIAEBEXUXBwoODhFNDhJRFRFVARIIEggSWRJdEmEEAAARTQQgAQ4OBAABAQIG
AAEBEYCFBhABAR4ADggKARUSPQESCAYVEj0BEggIIAAVEVUBEwAGFRFVARIIBCAAEwAFIAIODg4K
AAIODhUSgJkBDgUAAQ4dDgYgAgEOElkDIAAIAyAAAgcABA4ODg4OBQABEmEOAyAADgUgABKArQgA
ARKAsRGAtQUgABKAuQcgAgEOEoC5CLd6XFYZNOCJCDCtT+aypq7tCImEXc2AgMyRBAAAAAAEAQAA
AAIGDgYGFRI9AQ4CBggHBhUSPQESCAMGEm0DBhJxAwYSGAMGERwHIAAVEj0BDgggAQEVEj0BDggg
ABUSPQESCAkgAQEVEj0BEggEAAASbQQAABJxBQABARJxBAAAEhgDAAABAygADgcoABUSPQEOAygA
CAgoABUSPQESCAQIABJtBAgAEnEECAASGAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU1RfNTFkOTQzOTM1NTAwNDgyNWFkYTcxZGU4ODUzYmNmYTYA
AAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12
NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcMAQAHZG9tYWlu
cwAADgEACXdlYl9wYWdlcwAAEwEADmFscGhhX3R3b19jb2RlAAAAALQAAADOyu++AQAAAJEAAABs
U3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAu
MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3Rl
bS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADAOQAA
AAAAAAAAAADaOQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzDkAAAAAAAAAAAAAAABfQ29yRGxs
TWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAiWq4IgAAAQCJargiPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwA1ADEAZAA5ADQAMwA5ADMANQA1ADAAMAA0ADgAMgA1AGEAZABhADcAMQBkAGUAOAA4ADUA
MwBiAGMAZgBhADYAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA4
ADgAOAAuADIANwAyADcAMwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwA1ADEAZAA5ADQAMwA5ADMANQA1ADAAMAA0ADgAMgA1AGEAZABhADcAMQBkAGUAOAA4ADUAMwBi
AGMAZgBhADYALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfADUAMQBkADkANAAzADkAMwA1ADUAMAAwADQAOAAyADUAYQBkAGEANwAxAGQAZQA4
ADgANQAzAGIAYwBmAGEANgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwA1ADEAZAA5ADQAMwA5ADMANQA1ADAAMAA0ADgAMgA1AGEAZABhADcAMQBkAGUAOAA4
ADUAMwBiAGMAZgBhADYAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADgAOAA4ADgALgAyADcAMgA3ADMAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADgAOAA4ADgALgAyADcAMgA3ADMAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA7DkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="162.666666666667,42.6666666666667"
          Id="Package\LoadAPI_Into_DB"
          TopLeft="145.624993490055,43.5499979233743" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>